var API={Client:{}};API.Client.Address=function(){};API.Client.Button=function(){};API.Client.ButtonsListResponse=function(){};API.Client.Fabric=function(){};API.Client.FabricsListResponse=function(){};API.Client.Jean=function(){};API.Client.JeansListResponse=function(){};API.Client.Measurement=function(){};API.Client.Comment=function(){};API.Client.CommentsListResponse=function(){};API.Client.Order=function(){};API.Client.OrderItem=function(){};API.Client.OrdersListResponse=function(){};API.Client.Thread=function(){};API.Client.ThreadsListResponse=function(){};API.Client.Transaction=function(){};API.Client.User=function(){};API.Client.UsersListResponse=function(){};API.Client.DefaultApi=function(a,b,c){this.basePath_=c.has("DefaultApiBasePath")?c.get("DefaultApiBasePath"):"https://kd6f1omjzc.execute-api.us-east-1.amazonaws.com/development";this.defaultHeaders_=c.has("DefaultApiDefaultHeaders")?c.get("DefaultApiDefaultHeaders"):{};this.http_=a;this.httpParamSerializer=c.get("$httpParamSerializer")};API.Client.DefaultApi.$inject=["$http","$httpParamSerializer","$injector"];
API.Client.DefaultApi.prototype.buttonsButtonIdOptions=function(a,b){var c=this.basePath_+"/buttons/{buttonId}".replace("{buttonId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter buttonId when calling buttonsButtonIdOptions");a={method:"OPTIONS",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.buttonsCreate=function(a,b){var c=this.basePath_+"/buttons",d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter button when calling buttonsCreate");a={method:"POST",url:c,json:!0,data:a,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.buttonsDelete=function(a,b){var c=this.basePath_+"/buttons/{buttonId}".replace("{buttonId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter buttonId when calling buttonsDelete");a={method:"DELETE",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.buttonsGet=function(a,b){var c=this.basePath_+"/buttons/{buttonId}".replace("{buttonId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter buttonId when calling buttonsGet");a={method:"GET",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.buttonsList=function(a,b,c){var d=this.basePath_+"/buttons",e={},f=angular.extend({},this.defaultHeaders_);void 0!==a&&(e.page_size=a);void 0!==b&&(e.next=b);a={method:"GET",url:d,json:!0,params:e,headers:f};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.buttonsOptions=function(a,b,c){var d=this.basePath_+"/buttons",e={},f=angular.extend({},this.defaultHeaders_);void 0!==a&&(e.page_size=a);void 0!==b&&(e.next=b);a={method:"OPTIONS",url:d,json:!0,params:e,headers:f};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.buttonsUpdate=function(a,b,c){var d=this.basePath_+"/buttons/{buttonId}".replace("{buttonId}",String(a)),e=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter buttonId when calling buttonsUpdate");if(!b)throw Error("Missing required parameter button when calling buttonsUpdate");a={method:"POST",url:d,json:!0,data:b,params:{},headers:e};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.commentsCreate=function(a,b,c){var d=this.basePath_+"/orders/{orderId}/comments".replace("{orderId}",String(a)),e=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter orderId when calling commentsCreate");if(!b)throw Error("Missing required parameter comment when calling commentsCreate");a={method:"POST",url:d,json:!0,data:b,params:{},headers:e};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.commentsList=function(a,b){var c=this.basePath_+"/orders/{orderId}/comments".replace("{orderId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter orderId when calling commentsList");a={method:"GET",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.fabricsCreate=function(a,b){var c=this.basePath_+"/fabrics",d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter fabric when calling fabricsCreate");a={method:"POST",url:c,json:!0,data:a,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.fabricsDelete=function(a,b){var c=this.basePath_+"/fabrics/{fabricId}".replace("{fabricId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter fabricId when calling fabricsDelete");a={method:"DELETE",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.fabricsFabricIdOptions=function(a,b){var c=this.basePath_+"/fabrics/{fabricId}".replace("{fabricId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter fabricId when calling fabricsFabricIdOptions");a={method:"OPTIONS",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.fabricsGet=function(a,b){var c=this.basePath_+"/fabrics/{fabricId}".replace("{fabricId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter fabricId when calling fabricsGet");a={method:"GET",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.fabricsList=function(a,b,c){var d=this.basePath_+"/fabrics",e={},f=angular.extend({},this.defaultHeaders_);void 0!==a&&(e.page_size=a);void 0!==b&&(e.next=b);a={method:"GET",url:d,json:!0,params:e,headers:f};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.fabricsOptions=function(a,b,c){var d=this.basePath_+"/fabrics",e={},f=angular.extend({},this.defaultHeaders_);void 0!==a&&(e.page_size=a);void 0!==b&&(e.next=b);a={method:"OPTIONS",url:d,json:!0,params:e,headers:f};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.fabricsUpdate=function(a,b,c){var d=this.basePath_+"/fabrics/{fabricId}".replace("{fabricId}",String(a)),e=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter fabricId when calling fabricsUpdate");if(!b)throw Error("Missing required parameter fabric when calling fabricsUpdate");a={method:"POST",url:d,json:!0,data:b,params:{},headers:e};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.jeansCreate=function(a,b,c){var d=this.basePath_+"/users/{userId}/jeans".replace("{userId}",String(a)),e=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling jeansCreate");if(!b)throw Error("Missing required parameter jean when calling jeansCreate");a={method:"POST",url:d,json:!0,data:b,params:{},headers:e};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.jeansDelete=function(a,b,c){var d=this.basePath_+"/users/{userId}/jeans/{jeanId}".replace("{userId}",String(a)).replace("{jeanId}",String(b)),e=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling jeansDelete");if(!b)throw Error("Missing required parameter jeanId when calling jeansDelete");a={method:"DELETE",url:d,json:!0,params:{},headers:e};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.jeansGet=function(a,b,c){var d=this.basePath_+"/users/{userId}/jeans/{jeanId}".replace("{userId}",String(a)).replace("{jeanId}",String(b)),e=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling jeansGet");if(!b)throw Error("Missing required parameter jeanId when calling jeansGet");a={method:"GET",url:d,json:!0,params:{},headers:e};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.jeansListByUser=function(a,b){var c=this.basePath_+"/users/{userId}/jeans".replace("{userId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling jeansListByUser");a={method:"GET",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.jeansUpdate=function(a,b,c,d){var e=this.basePath_+"/users/{userId}/jeans/{jeanId}".replace("{userId}",String(a)).replace("{jeanId}",String(b)),f=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling jeansUpdate");if(!b)throw Error("Missing required parameter jeanId when calling jeansUpdate");if(!c)throw Error("Missing required parameter jean when calling jeansUpdate");a={method:"POST",url:e,json:!0,data:c,params:{},
headers:f};d&&(a=angular.extend(a,d));return this.http_(a)};API.Client.DefaultApi.prototype.orderCreate=function(a,b){var c=this.basePath_+"/orders",d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter order when calling orderCreate");a={method:"POST",url:c,json:!0,data:a,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.ordersDelete=function(a,b){var c=this.basePath_+"/orders/{orderId}".replace("{orderId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter orderId when calling ordersDelete");a={method:"DELETE",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.ordersGet=function(a,b){var c=this.basePath_+"/orders/{orderId}".replace("{orderId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter orderId when calling ordersGet");a={method:"GET",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.ordersList=function(a,b,c){var d=this.basePath_+"/orders",e={},f=angular.extend({},this.defaultHeaders_);void 0!==a&&(e.page_size=a);void 0!==b&&(e.next=b);a={method:"GET",url:d,json:!0,params:e,headers:f};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.ordersListByUser=function(a,b,c,d){var e=this.basePath_+"/users/{userId}/orders".replace("{userId}",String(a)),f={},g=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling ordersListByUser");void 0!==b&&(f.page_size=b);void 0!==c&&(f.next=c);a={method:"GET",url:e,json:!0,params:f,headers:g};d&&(a=angular.extend(a,d));return this.http_(a)};
API.Client.DefaultApi.prototype.ordersOptions=function(a,b,c){var d=this.basePath_+"/orders",e={},f=angular.extend({},this.defaultHeaders_);void 0!==a&&(e.page_size=a);void 0!==b&&(e.next=b);a={method:"OPTIONS",url:d,json:!0,params:e,headers:f};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.ordersOrderIdCommentsOptions=function(a,b){var c=this.basePath_+"/orders/{orderId}/comments".replace("{orderId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter orderId when calling ordersOrderIdCommentsOptions");a={method:"OPTIONS",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.ordersOrderIdOptions=function(a,b){var c=this.basePath_+"/orders/{orderId}".replace("{orderId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter orderId when calling ordersOrderIdOptions");a={method:"OPTIONS",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.ordersUpdate=function(a,b,c){var d=this.basePath_+"/orders/{orderId}".replace("{orderId}",String(a)),e=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter orderId when calling ordersUpdate");if(!b)throw Error("Missing required parameter order when calling ordersUpdate");a={method:"POST",url:d,json:!0,data:b,params:{},headers:e};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.pingOptions=function(a){var b=this.basePath_+"/ping",c=angular.extend({},this.defaultHeaders_);b={method:"OPTIONS",url:b,json:!0,params:{},headers:c};a&&(b=angular.extend(b,a));return this.http_(b)};API.Client.DefaultApi.prototype.pingPingOperation=function(a){var b=this.basePath_+"/ping",c=angular.extend({},this.defaultHeaders_);b={method:"GET",url:b,json:!0,params:{},headers:c};a&&(b=angular.extend(b,a));return this.http_(b)};
API.Client.DefaultApi.prototype.threadsCreate=function(a,b){var c=this.basePath_+"/threads",d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter thread when calling threadsCreate");a={method:"POST",url:c,json:!0,data:a,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.threadsDelete=function(a,b){var c=this.basePath_+"/threads/{threadId}".replace("{threadId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter threadId when calling threadsDelete");a={method:"DELETE",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.threadsGet=function(a,b){var c=this.basePath_+"/threads/{threadId}".replace("{threadId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter threadId when calling threadsGet");a={method:"GET",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.threadsList=function(a,b,c){var d=this.basePath_+"/threads",e={},f=angular.extend({},this.defaultHeaders_);void 0!==a&&(e.page_size=a);void 0!==b&&(e.next=b);a={method:"GET",url:d,json:!0,params:e,headers:f};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.threadsOptions=function(a,b,c){var d=this.basePath_+"/threads",e={},f=angular.extend({},this.defaultHeaders_);void 0!==a&&(e.page_size=a);void 0!==b&&(e.next=b);a={method:"OPTIONS",url:d,json:!0,params:e,headers:f};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.threadsThreadIdOptions=function(a,b){var c=this.basePath_+"/threads/{threadId}".replace("{threadId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter threadId when calling threadsThreadIdOptions");a={method:"OPTIONS",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.threadsUpdate=function(a,b,c){var d=this.basePath_+"/threads/{threadId}".replace("{threadId}",String(a)),e=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter threadId when calling threadsUpdate");if(!b)throw Error("Missing required parameter thread when calling threadsUpdate");a={method:"POST",url:d,json:!0,data:b,params:{},headers:e};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.usersCreate=function(a,b){var c=this.basePath_+"/users",d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter user when calling usersCreate");a={method:"POST",url:c,json:!0,data:a,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.usersDelete=function(a,b){var c=this.basePath_+"/users/{userId}".replace("{userId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling usersDelete");a={method:"DELETE",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.usersGet=function(a,b){var c=this.basePath_+"/users/{userId}".replace("{userId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling usersGet");a={method:"GET",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.usersList=function(a,b,c){var d=this.basePath_+"/users",e={},f=angular.extend({},this.defaultHeaders_);void 0!==a&&(e.page_size=a);void 0!==b&&(e.next=b);a={method:"GET",url:d,json:!0,params:e,headers:f};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.usersOptions=function(a,b,c){var d=this.basePath_+"/users",e={},f=angular.extend({},this.defaultHeaders_);void 0!==a&&(e.page_size=a);void 0!==b&&(e.next=b);a={method:"OPTIONS",url:d,json:!0,params:e,headers:f};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.usersUpdate=function(a,b,c){var d=this.basePath_+"/users/{userId}".replace("{userId}",String(a)),e=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling usersUpdate");if(!b)throw Error("Missing required parameter user when calling usersUpdate");a={method:"POST",url:d,json:!0,data:b,params:{},headers:e};c&&(a=angular.extend(a,c));return this.http_(a)};
API.Client.DefaultApi.prototype.usersUserIdJeansJeanIdOptions=function(a,b,c){var d=this.basePath_+"/users/{userId}/jeans/{jeanId}".replace("{userId}",String(a)).replace("{jeanId}",String(b)),e=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling usersUserIdJeansJeanIdOptions");if(!b)throw Error("Missing required parameter jeanId when calling usersUserIdJeansJeanIdOptions");a={method:"OPTIONS",url:d,json:!0,params:{},headers:e};c&&(a=angular.extend(a,
c));return this.http_(a)};API.Client.DefaultApi.prototype.usersUserIdJeansOptions=function(a,b){var c=this.basePath_+"/users/{userId}/jeans".replace("{userId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling usersUserIdJeansOptions");a={method:"OPTIONS",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.usersUserIdOptions=function(a,b){var c=this.basePath_+"/users/{userId}".replace("{userId}",String(a)),d=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling usersUserIdOptions");a={method:"OPTIONS",url:c,json:!0,params:{},headers:d};b&&(a=angular.extend(a,b));return this.http_(a)};
API.Client.DefaultApi.prototype.usersUserIdOrdersOptions=function(a,b,c,d){var e=this.basePath_+"/users/{userId}/orders".replace("{userId}",String(a)),f={},g=angular.extend({},this.defaultHeaders_);if(!a)throw Error("Missing required parameter userId when calling usersUserIdOrdersOptions");void 0!==b&&(f.page_size=b);void 0!==c&&(f.next=c);a={method:"OPTIONS",url:e,json:!0,params:f,headers:g};d&&(a=angular.extend(a,d));return this.http_(a)};
