//Clearfix
.clearfix {
  &:after {
    content: "";
    display: table;
    clear: both; }
  *zoom: 1;
}
@mixin clearfix() {
  @extend .clearfix;
}

//Transforms
@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

//Rotation
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

//Cover Background
@mixin coverbkg($src, $position, $fixed:inherit){
	background: url($src); 
	-webkit-background-size: cover;
	-moz-background-size: cover;
	-o-background-size: cover;
	background-size: cover;
	background-position:$position;
	background-attachment:$fixed;
}
//Animation
@mixin animate($name, $duration, $iteration, $direction, $fillmode) {
-webkit-animation-duration: $duration;
   -moz-animation-duration: $duration;
     -o-animation-duration: $duration;
        animation-duration: $duration;
-webkit-animation-iteration-count: $iteration;
   -moz-animation-iteration-count: $iteration;
     -o-animation-iteration-count: $iteration;
        animation-iteration-count: $iteration;
-webkit-animation-name: $name;
   -moz-animation-name: $name;
     -o-animation-name: $name;
        animation-name: $name;
-webkit-animation-direction: $direction;
   -moz-animation-direction: $direction;
     -o-animation-direction: $direction;
        animation-direction: $direction;
-webkit-animation-fill-mode: $fillmode;
   -moz-animation-fill-mode: $fillmode;
     -o-animation-fill-mode: $fillmode;
				animation-fill-mode: $fillmode;
}
@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}

//Media Queries
$min: min-width;
$max: max-width;
@mixin at-query($constraint, $viewport1, $viewport2:null) {

  @if $constraint == $min {
    @media screen and ($min: $viewport1) {
      @content;
    }
  } @else if $constraint == $max {
    @media screen and ($max: $viewport1) {
      @content;
    }
  } @else {
    @media screen and ($min: $viewport1) and ($max: $viewport2) {
      @content;
    }
  }
  
}

//Transitions
@mixin transition($transition-property, $transition-time, $method) {
  -webkit-transition: $transition-property $transition-time $method;
  -moz-transition: $transition-property $transition-time $method;
  -ms-transition: $transition-property $transition-time $method;
  -o-transition: $transition-property $transition-time $method;
  transition: $transition-property $transition-time $method;
}
//Box-sizing
@mixin box-sizing($box){
	-moz-box-sizing: $box;
	-webkit-box-sizing: $box;
	box-sizing: $box;
}
//Font Size
@mixin font-size($sizeValue: 1.6, $line: $sizeValue * 1.5){
  font-size: ($sizeValue * 1) + px;
  line-height: ($line * 1) + px;
  font-size: ($sizeValue / 10) + rem;
  line-height: ($line / 10) + rem;
}

//Vertical Center
@mixin vertical-align {
    position: absolute;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

//Box Shadow
@mixin box-shadow($shadow) {
	-webkit-box-shadow: #{$shadow};
	-moz-box-shadow:    #{$shadow};
	box-shadow:         #{$shadow};
}

//Box Sizing
@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model; // Safari <= 5
	-moz-box-sizing: $box-model; // Firefox <= 19
	box-sizing: $box-model;
}

//Gradient
@mixin gradient($from, $to, $fallback) {
  background: $fallback;
  background: -moz-linear-gradient(top, $from 0%, $to 100%);
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$from), color-stop(100%,$to));
  background: -webkit-linear-gradient(top, $from 0%,$to 100%);
  background: -o-linear-gradient(top, $from 0%,$to 100%);
  background: -ms-linear-gradient(top, $from 0%,$to 100%);
  background: linear-gradient(top bottom, $from 0%,$to 100%);
}

