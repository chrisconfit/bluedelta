/**
 * BlueDelta-API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class DefaultApi {
    protected basePath = 'https://ritgmsrczb.execute-api.us-east-1.amazonaws.com/development';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * 
        * 
        * @param buttonId 
        */
    public buttonsButtonIdOptions (buttonId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/buttons/{buttonId}'
            .replace('{' + 'buttonId' + '}', String(buttonId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'buttonId' is not null or undefined
        if (buttonId === null || buttonId === undefined) {
            throw new Error('Required parameter buttonId was null or undefined when calling buttonsButtonIdOptions.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'OPTIONS',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param button 
        */
    public buttonsCreate (button: models.Button, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/buttons';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'button' is not null or undefined
        if (button === null || button === undefined) {
            throw new Error('Required parameter button was null or undefined when calling buttonsCreate.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: button,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param buttonId 
        */
    public buttonsDelete (buttonId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/buttons/{buttonId}'
            .replace('{' + 'buttonId' + '}', String(buttonId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'buttonId' is not null or undefined
        if (buttonId === null || buttonId === undefined) {
            throw new Error('Required parameter buttonId was null or undefined when calling buttonsDelete.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param buttonId 
        */
    public buttonsGet (buttonId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Button> {
        const localVarPath = this.basePath + '/buttons/{buttonId}'
            .replace('{' + 'buttonId' + '}', String(buttonId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'buttonId' is not null or undefined
        if (buttonId === null || buttonId === undefined) {
            throw new Error('Required parameter buttonId was null or undefined when calling buttonsGet.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        */
    public buttonsList (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ButtonsListResponse> {
        const localVarPath = this.basePath + '/buttons';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        */
    public buttonsOptions (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/buttons';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'OPTIONS',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param buttonId 
        * @param button 
        */
    public buttonsUpdate (buttonId: string, button: models.Button, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Button> {
        const localVarPath = this.basePath + '/buttons/{buttonId}'
            .replace('{' + 'buttonId' + '}', String(buttonId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'buttonId' is not null or undefined
        if (buttonId === null || buttonId === undefined) {
            throw new Error('Required parameter buttonId was null or undefined when calling buttonsUpdate.');
        }
        // verify required parameter 'button' is not null or undefined
        if (button === null || button === undefined) {
            throw new Error('Required parameter button was null or undefined when calling buttonsUpdate.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: button,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param fabric 
        */
    public fabricsCreate (fabric: models.Fabric, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fabrics';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'fabric' is not null or undefined
        if (fabric === null || fabric === undefined) {
            throw new Error('Required parameter fabric was null or undefined when calling fabricsCreate.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: fabric,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param fabricId 
        */
    public fabricsDelete (fabricId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fabrics/{fabricId}'
            .replace('{' + 'fabricId' + '}', String(fabricId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'fabricId' is not null or undefined
        if (fabricId === null || fabricId === undefined) {
            throw new Error('Required parameter fabricId was null or undefined when calling fabricsDelete.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param fabricId 
        */
    public fabricsFabricIdOptions (fabricId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fabrics/{fabricId}'
            .replace('{' + 'fabricId' + '}', String(fabricId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'fabricId' is not null or undefined
        if (fabricId === null || fabricId === undefined) {
            throw new Error('Required parameter fabricId was null or undefined when calling fabricsFabricIdOptions.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'OPTIONS',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param fabricId 
        */
    public fabricsGet (fabricId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Fabric> {
        const localVarPath = this.basePath + '/fabrics/{fabricId}'
            .replace('{' + 'fabricId' + '}', String(fabricId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'fabricId' is not null or undefined
        if (fabricId === null || fabricId === undefined) {
            throw new Error('Required parameter fabricId was null or undefined when calling fabricsGet.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        */
    public fabricsList (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.FabricsListResponse> {
        const localVarPath = this.basePath + '/fabrics';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        */
    public fabricsOptions (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/fabrics';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'OPTIONS',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param fabricId 
        * @param fabric 
        */
    public fabricsUpdate (fabricId: string, fabric: models.Fabric, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Fabric> {
        const localVarPath = this.basePath + '/fabrics/{fabricId}'
            .replace('{' + 'fabricId' + '}', String(fabricId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'fabricId' is not null or undefined
        if (fabricId === null || fabricId === undefined) {
            throw new Error('Required parameter fabricId was null or undefined when calling fabricsUpdate.');
        }
        // verify required parameter 'fabric' is not null or undefined
        if (fabric === null || fabric === undefined) {
            throw new Error('Required parameter fabric was null or undefined when calling fabricsUpdate.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: fabric,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        */
    public ping (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/ping';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        */
    public pingOptions (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/ping';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'OPTIONS',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param thread 
        */
    public threadsCreate (thread: models.Thread, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/threads';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'thread' is not null or undefined
        if (thread === null || thread === undefined) {
            throw new Error('Required parameter thread was null or undefined when calling threadsCreate.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: thread,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param threadId 
        */
    public threadsDelete (threadId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/threads/{threadId}'
            .replace('{' + 'threadId' + '}', String(threadId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'threadId' is not null or undefined
        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling threadsDelete.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param threadId 
        */
    public threadsGet (threadId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Thread> {
        const localVarPath = this.basePath + '/threads/{threadId}'
            .replace('{' + 'threadId' + '}', String(threadId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'threadId' is not null or undefined
        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling threadsGet.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        */
    public threadsList (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ThreadsListResponse> {
        const localVarPath = this.basePath + '/threads';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        */
    public threadsOptions (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/threads';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'OPTIONS',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param threadId 
        */
    public threadsThreadIdOptions (threadId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/threads/{threadId}'
            .replace('{' + 'threadId' + '}', String(threadId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'threadId' is not null or undefined
        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling threadsThreadIdOptions.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'OPTIONS',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param threadId 
        * @param thread 
        */
    public threadsUpdate (threadId: string, thread: models.Thread, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Thread> {
        const localVarPath = this.basePath + '/threads/{threadId}'
            .replace('{' + 'threadId' + '}', String(threadId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'threadId' is not null or undefined
        if (threadId === null || threadId === undefined) {
            throw new Error('Required parameter threadId was null or undefined when calling threadsUpdate.');
        }
        // verify required parameter 'thread' is not null or undefined
        if (thread === null || thread === undefined) {
            throw new Error('Required parameter thread was null or undefined when calling threadsUpdate.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: thread,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param user 
        */
    public usersCreate (user: models.User, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.User> {
        const localVarPath = this.basePath + '/users';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling usersCreate.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: user,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param userId 
        */
    public usersDelete (userId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/users/{userId}'
            .replace('{' + 'userId' + '}', String(userId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersDelete.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param userId 
        */
    public usersGet (userId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.User> {
        const localVarPath = this.basePath + '/users/{userId}'
            .replace('{' + 'userId' + '}', String(userId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersGet.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        */
    public usersList (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.UsersListResponse> {
        const localVarPath = this.basePath + '/users';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        */
    public usersOptions (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/users';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'OPTIONS',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param userId 
        * @param user 
        */
    public usersUpdate (userId: string, user: models.User, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.User> {
        const localVarPath = this.basePath + '/users/{userId}'
            .replace('{' + 'userId' + '}', String(userId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUpdate.');
        }
        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling usersUpdate.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: user,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * 
        * @param userId 
        */
    public usersUserIdOptions (userId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/users/{userId}'
            .replace('{' + 'userId' + '}', String(userId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling usersUserIdOptions.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'OPTIONS',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
