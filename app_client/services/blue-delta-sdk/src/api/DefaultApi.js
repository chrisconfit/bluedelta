/**
 * BlueDelta-API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Button', 'model/ButtonsListResponse', 'model/Fabric', 'model/FabricsListResponse', 'model/Order', 'model/OrdersListResponse', 'model/Thread', 'model/ThreadsListResponse', 'model/User', 'model/UsersListResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Button'), require('../model/ButtonsListResponse'), require('../model/Fabric'), require('../model/FabricsListResponse'), require('../model/Order'), require('../model/OrdersListResponse'), require('../model/Thread'), require('../model/ThreadsListResponse'), require('../model/User'), require('../model/UsersListResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.BlueDeltaApi) {
      root.BlueDeltaApi = {};
    }
    root.BlueDeltaApi.DefaultApi = factory(root.BlueDeltaApi.ApiClient, root.BlueDeltaApi.Button, root.BlueDeltaApi.ButtonsListResponse, root.BlueDeltaApi.Fabric, root.BlueDeltaApi.FabricsListResponse, root.BlueDeltaApi.Order, root.BlueDeltaApi.OrdersListResponse, root.BlueDeltaApi.Thread, root.BlueDeltaApi.ThreadsListResponse, root.BlueDeltaApi.User, root.BlueDeltaApi.UsersListResponse);
  }
}(this, function(ApiClient, Button, ButtonsListResponse, Fabric, FabricsListResponse, Order, OrdersListResponse, Thread, ThreadsListResponse, User, UsersListResponse) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the buttonsButtonIdOptions operation.
     * @callback module:api/DefaultApi~buttonsButtonIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buttonId 
     * @param {module:api/DefaultApi~buttonsButtonIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.buttonsButtonIdOptions = function(buttonId, callback) {
      var postBody = null;

      // verify the required parameter 'buttonId' is set
      if (buttonId == undefined || buttonId == null) {
        throw new Error("Missing the required parameter 'buttonId' when calling buttonsButtonIdOptions");
      }


      var pathParams = {
        'buttonId': buttonId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buttons/{buttonId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the buttonsCreate operation.
     * @callback module:api/DefaultApi~buttonsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Button} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Button} button 
     * @param {module:api/DefaultApi~buttonsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Button}
     */
    this.buttonsCreate = function(button, callback) {
      var postBody = button;

      // verify the required parameter 'button' is set
      if (button == undefined || button == null) {
        throw new Error("Missing the required parameter 'button' when calling buttonsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['blue-delta-userPool-authorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Button;

      return this.apiClient.callApi(
        '/buttons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the buttonsDelete operation.
     * @callback module:api/DefaultApi~buttonsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buttonId 
     * @param {module:api/DefaultApi~buttonsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.buttonsDelete = function(buttonId, callback) {
      var postBody = null;

      // verify the required parameter 'buttonId' is set
      if (buttonId == undefined || buttonId == null) {
        throw new Error("Missing the required parameter 'buttonId' when calling buttonsDelete");
      }


      var pathParams = {
        'buttonId': buttonId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['blue-delta-userPool-authorizer'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buttons/{buttonId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the buttonsGet operation.
     * @callback module:api/DefaultApi~buttonsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Button} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buttonId 
     * @param {module:api/DefaultApi~buttonsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Button}
     */
    this.buttonsGet = function(buttonId, callback) {
      var postBody = null;

      // verify the required parameter 'buttonId' is set
      if (buttonId == undefined || buttonId == null) {
        throw new Error("Missing the required parameter 'buttonId' when calling buttonsGet");
      }


      var pathParams = {
        'buttonId': buttonId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['blue-delta-userPool-authorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Button;

      return this.apiClient.callApi(
        '/buttons/{buttonId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the buttonsList operation.
     * @callback module:api/DefaultApi~buttonsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ButtonsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~buttonsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ButtonsListResponse}
     */
    this.buttonsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['blue-delta-userPool-authorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ButtonsListResponse;

      return this.apiClient.callApi(
        '/buttons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the buttonsOptions operation.
     * @callback module:api/DefaultApi~buttonsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~buttonsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.buttonsOptions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/buttons', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the buttonsUpdate operation.
     * @callback module:api/DefaultApi~buttonsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Button} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buttonId 
     * @param {module:model/Button} button 
     * @param {module:api/DefaultApi~buttonsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Button}
     */
    this.buttonsUpdate = function(buttonId, button, callback) {
      var postBody = button;

      // verify the required parameter 'buttonId' is set
      if (buttonId == undefined || buttonId == null) {
        throw new Error("Missing the required parameter 'buttonId' when calling buttonsUpdate");
      }

      // verify the required parameter 'button' is set
      if (button == undefined || button == null) {
        throw new Error("Missing the required parameter 'button' when calling buttonsUpdate");
      }


      var pathParams = {
        'buttonId': buttonId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['blue-delta-userPool-authorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Button;

      return this.apiClient.callApi(
        '/buttons/{buttonId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fabricsCreate operation.
     * @callback module:api/DefaultApi~fabricsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fabric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Fabric} fabric 
     * @param {module:api/DefaultApi~fabricsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fabric}
     */
    this.fabricsCreate = function(fabric, callback) {
      var postBody = fabric;

      // verify the required parameter 'fabric' is set
      if (fabric == undefined || fabric == null) {
        throw new Error("Missing the required parameter 'fabric' when calling fabricsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Fabric;

      return this.apiClient.callApi(
        '/fabrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fabricsDelete operation.
     * @callback module:api/DefaultApi~fabricsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} fabricId 
     * @param {module:api/DefaultApi~fabricsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.fabricsDelete = function(fabricId, callback) {
      var postBody = null;

      // verify the required parameter 'fabricId' is set
      if (fabricId == undefined || fabricId == null) {
        throw new Error("Missing the required parameter 'fabricId' when calling fabricsDelete");
      }


      var pathParams = {
        'fabricId': fabricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/fabrics/{fabricId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fabricsFabricIdOptions operation.
     * @callback module:api/DefaultApi~fabricsFabricIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} fabricId 
     * @param {module:api/DefaultApi~fabricsFabricIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.fabricsFabricIdOptions = function(fabricId, callback) {
      var postBody = null;

      // verify the required parameter 'fabricId' is set
      if (fabricId == undefined || fabricId == null) {
        throw new Error("Missing the required parameter 'fabricId' when calling fabricsFabricIdOptions");
      }


      var pathParams = {
        'fabricId': fabricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/fabrics/{fabricId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fabricsGet operation.
     * @callback module:api/DefaultApi~fabricsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fabric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} fabricId 
     * @param {module:api/DefaultApi~fabricsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fabric}
     */
    this.fabricsGet = function(fabricId, callback) {
      var postBody = null;

      // verify the required parameter 'fabricId' is set
      if (fabricId == undefined || fabricId == null) {
        throw new Error("Missing the required parameter 'fabricId' when calling fabricsGet");
      }


      var pathParams = {
        'fabricId': fabricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Fabric;

      return this.apiClient.callApi(
        '/fabrics/{fabricId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fabricsList operation.
     * @callback module:api/DefaultApi~fabricsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FabricsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~fabricsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FabricsListResponse}
     */
    this.fabricsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FabricsListResponse;

      return this.apiClient.callApi(
        '/fabrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fabricsOptions operation.
     * @callback module:api/DefaultApi~fabricsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~fabricsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.fabricsOptions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/fabrics', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the fabricsUpdate operation.
     * @callback module:api/DefaultApi~fabricsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fabric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} fabricId 
     * @param {module:model/Fabric} fabric 
     * @param {module:api/DefaultApi~fabricsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fabric}
     */
    this.fabricsUpdate = function(fabricId, fabric, callback) {
      var postBody = fabric;

      // verify the required parameter 'fabricId' is set
      if (fabricId == undefined || fabricId == null) {
        throw new Error("Missing the required parameter 'fabricId' when calling fabricsUpdate");
      }

      // verify the required parameter 'fabric' is set
      if (fabric == undefined || fabric == null) {
        throw new Error("Missing the required parameter 'fabric' when calling fabricsUpdate");
      }


      var pathParams = {
        'fabricId': fabricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Fabric;

      return this.apiClient.callApi(
        '/fabrics/{fabricId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orderCreate operation.
     * @callback module:api/DefaultApi~orderCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Order} order 
     * @param {module:api/DefaultApi~orderCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.orderCreate = function(order, callback) {
      var postBody = order;

      // verify the required parameter 'order' is set
      if (order == undefined || order == null) {
        throw new Error("Missing the required parameter 'order' when calling orderCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersDelete operation.
     * @callback module:api/DefaultApi~ordersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} orderId 
     * @param {module:api/DefaultApi~ordersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.ordersDelete = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersDelete");
      }


      var pathParams = {
        'orderId': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/orders/{orderId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersGet operation.
     * @callback module:api/DefaultApi~ordersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} orderId 
     * @param {module:api/DefaultApi~ordersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.ordersGet = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersGet");
      }


      var pathParams = {
        'orderId': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersList operation.
     * @callback module:api/DefaultApi~ordersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~ordersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersListResponse}
     */
    this.ordersList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrdersListResponse;

      return this.apiClient.callApi(
        '/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersListByUser operation.
     * @callback module:api/DefaultApi~ordersListByUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~ordersListByUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersListResponse}
     */
    this.ordersListByUser = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling ordersListByUser");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['blue-delta-userPool-authorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrdersListResponse;

      return this.apiClient.callApi(
        '/users/{userId}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersOptions operation.
     * @callback module:api/DefaultApi~ordersOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~ordersOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.ordersOptions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/orders', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersOrderIdOptions operation.
     * @callback module:api/DefaultApi~ordersOrderIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} orderId 
     * @param {module:api/DefaultApi~ordersOrderIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.ordersOrderIdOptions = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdOptions");
      }


      var pathParams = {
        'orderId': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/orders/{orderId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersUpdate operation.
     * @callback module:api/DefaultApi~ordersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} orderId 
     * @param {module:model/Order} order 
     * @param {module:api/DefaultApi~ordersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.ordersUpdate = function(orderId, order, callback) {
      var postBody = order;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersUpdate");
      }

      // verify the required parameter 'order' is set
      if (order == undefined || order == null) {
        throw new Error("Missing the required parameter 'order' when calling ordersUpdate");
      }


      var pathParams = {
        'orderId': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{orderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pingOptions operation.
     * @callback module:api/DefaultApi~pingOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~pingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.pingOptions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/ping', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the pingPingOperation operation.
     * @callback module:api/DefaultApi~pingPingOperationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~pingPingOperationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.pingPingOperation = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the threadsCreate operation.
     * @callback module:api/DefaultApi~threadsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Thread} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Thread} thread 
     * @param {module:api/DefaultApi~threadsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Thread}
     */
    this.threadsCreate = function(thread, callback) {
      var postBody = thread;

      // verify the required parameter 'thread' is set
      if (thread == undefined || thread == null) {
        throw new Error("Missing the required parameter 'thread' when calling threadsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Thread;

      return this.apiClient.callApi(
        '/threads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the threadsDelete operation.
     * @callback module:api/DefaultApi~threadsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} threadId 
     * @param {module:api/DefaultApi~threadsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.threadsDelete = function(threadId, callback) {
      var postBody = null;

      // verify the required parameter 'threadId' is set
      if (threadId == undefined || threadId == null) {
        throw new Error("Missing the required parameter 'threadId' when calling threadsDelete");
      }


      var pathParams = {
        'threadId': threadId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/threads/{threadId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the threadsGet operation.
     * @callback module:api/DefaultApi~threadsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Thread} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} threadId 
     * @param {module:api/DefaultApi~threadsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Thread}
     */
    this.threadsGet = function(threadId, callback) {
      var postBody = null;

      // verify the required parameter 'threadId' is set
      if (threadId == undefined || threadId == null) {
        throw new Error("Missing the required parameter 'threadId' when calling threadsGet");
      }


      var pathParams = {
        'threadId': threadId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Thread;

      return this.apiClient.callApi(
        '/threads/{threadId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the threadsList operation.
     * @callback module:api/DefaultApi~threadsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThreadsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~threadsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThreadsListResponse}
     */
    this.threadsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThreadsListResponse;

      return this.apiClient.callApi(
        '/threads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the threadsOptions operation.
     * @callback module:api/DefaultApi~threadsOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~threadsOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.threadsOptions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/threads', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the threadsThreadIdOptions operation.
     * @callback module:api/DefaultApi~threadsThreadIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} threadId 
     * @param {module:api/DefaultApi~threadsThreadIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.threadsThreadIdOptions = function(threadId, callback) {
      var postBody = null;

      // verify the required parameter 'threadId' is set
      if (threadId == undefined || threadId == null) {
        throw new Error("Missing the required parameter 'threadId' when calling threadsThreadIdOptions");
      }


      var pathParams = {
        'threadId': threadId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/threads/{threadId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the threadsUpdate operation.
     * @callback module:api/DefaultApi~threadsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Thread} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} threadId 
     * @param {module:model/Thread} thread 
     * @param {module:api/DefaultApi~threadsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Thread}
     */
    this.threadsUpdate = function(threadId, thread, callback) {
      var postBody = thread;

      // verify the required parameter 'threadId' is set
      if (threadId == undefined || threadId == null) {
        throw new Error("Missing the required parameter 'threadId' when calling threadsUpdate");
      }

      // verify the required parameter 'thread' is set
      if (thread == undefined || thread == null) {
        throw new Error("Missing the required parameter 'thread' when calling threadsUpdate");
      }


      var pathParams = {
        'threadId': threadId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Thread;

      return this.apiClient.callApi(
        '/threads/{threadId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersCreate operation.
     * @callback module:api/DefaultApi~usersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/User} user 
     * @param {module:api/DefaultApi~usersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.usersCreate = function(user, callback) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling usersCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDelete operation.
     * @callback module:api/DefaultApi~usersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~usersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersDelete = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling usersDelete");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/DefaultApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.usersGet = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling usersGet");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersList operation.
     * @callback module:api/DefaultApi~usersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~usersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersListResponse}
     */
    this.usersList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['blue-delta-userPool-authorizer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersListResponse;

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersOptions operation.
     * @callback module:api/DefaultApi~usersOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~usersOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersOptions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/users', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUpdate operation.
     * @callback module:api/DefaultApi~usersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:model/User} user 
     * @param {module:api/DefaultApi~usersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.usersUpdate = function(userId, user, callback) {
      var postBody = user;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUpdate");
      }

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling usersUpdate");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['sigv4'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/{userId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdOptions operation.
     * @callback module:api/DefaultApi~usersUserIdOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~usersUserIdOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersUserIdOptions = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdOptions");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdOrdersOptions operation.
     * @callback module:api/DefaultApi~usersUserIdOrdersOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/DefaultApi~usersUserIdOrdersOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.usersUserIdOrdersOptions = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdOrdersOptions");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/orders', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
