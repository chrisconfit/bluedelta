/**
 * BlueDelta-API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BlueDeltaApi);
  }
}(this, function(expect, BlueDeltaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BlueDeltaApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('buttonsButtonIdOptions', function() {
      it('should call buttonsButtonIdOptions successfully', function(done) {
        //uncomment below and update the code to test buttonsButtonIdOptions
        //instance.buttonsButtonIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buttonsCreate', function() {
      it('should call buttonsCreate successfully', function(done) {
        //uncomment below and update the code to test buttonsCreate
        //instance.buttonsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buttonsDelete', function() {
      it('should call buttonsDelete successfully', function(done) {
        //uncomment below and update the code to test buttonsDelete
        //instance.buttonsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buttonsGet', function() {
      it('should call buttonsGet successfully', function(done) {
        //uncomment below and update the code to test buttonsGet
        //instance.buttonsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buttonsList', function() {
      it('should call buttonsList successfully', function(done) {
        //uncomment below and update the code to test buttonsList
        //instance.buttonsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buttonsOptions', function() {
      it('should call buttonsOptions successfully', function(done) {
        //uncomment below and update the code to test buttonsOptions
        //instance.buttonsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buttonsUpdate', function() {
      it('should call buttonsUpdate successfully', function(done) {
        //uncomment below and update the code to test buttonsUpdate
        //instance.buttonsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fabricsCreate', function() {
      it('should call fabricsCreate successfully', function(done) {
        //uncomment below and update the code to test fabricsCreate
        //instance.fabricsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fabricsDelete', function() {
      it('should call fabricsDelete successfully', function(done) {
        //uncomment below and update the code to test fabricsDelete
        //instance.fabricsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fabricsFabricIdOptions', function() {
      it('should call fabricsFabricIdOptions successfully', function(done) {
        //uncomment below and update the code to test fabricsFabricIdOptions
        //instance.fabricsFabricIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fabricsGet', function() {
      it('should call fabricsGet successfully', function(done) {
        //uncomment below and update the code to test fabricsGet
        //instance.fabricsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fabricsList', function() {
      it('should call fabricsList successfully', function(done) {
        //uncomment below and update the code to test fabricsList
        //instance.fabricsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fabricsOptions', function() {
      it('should call fabricsOptions successfully', function(done) {
        //uncomment below and update the code to test fabricsOptions
        //instance.fabricsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fabricsUpdate', function() {
      it('should call fabricsUpdate successfully', function(done) {
        //uncomment below and update the code to test fabricsUpdate
        //instance.fabricsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('orderCreate', function() {
      it('should call orderCreate successfully', function(done) {
        //uncomment below and update the code to test orderCreate
        //instance.orderCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ordersDelete', function() {
      it('should call ordersDelete successfully', function(done) {
        //uncomment below and update the code to test ordersDelete
        //instance.ordersDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ordersGet', function() {
      it('should call ordersGet successfully', function(done) {
        //uncomment below and update the code to test ordersGet
        //instance.ordersGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ordersList', function() {
      it('should call ordersList successfully', function(done) {
        //uncomment below and update the code to test ordersList
        //instance.ordersList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ordersListByUser', function() {
      it('should call ordersListByUser successfully', function(done) {
        //uncomment below and update the code to test ordersListByUser
        //instance.ordersListByUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ordersOptions', function() {
      it('should call ordersOptions successfully', function(done) {
        //uncomment below and update the code to test ordersOptions
        //instance.ordersOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ordersOrderIdOptions', function() {
      it('should call ordersOrderIdOptions successfully', function(done) {
        //uncomment below and update the code to test ordersOrderIdOptions
        //instance.ordersOrderIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ordersUpdate', function() {
      it('should call ordersUpdate successfully', function(done) {
        //uncomment below and update the code to test ordersUpdate
        //instance.ordersUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pingOptions', function() {
      it('should call pingOptions successfully', function(done) {
        //uncomment below and update the code to test pingOptions
        //instance.pingOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pingPingOperation', function() {
      it('should call pingPingOperation successfully', function(done) {
        //uncomment below and update the code to test pingPingOperation
        //instance.pingPingOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('threadsCreate', function() {
      it('should call threadsCreate successfully', function(done) {
        //uncomment below and update the code to test threadsCreate
        //instance.threadsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('threadsDelete', function() {
      it('should call threadsDelete successfully', function(done) {
        //uncomment below and update the code to test threadsDelete
        //instance.threadsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('threadsGet', function() {
      it('should call threadsGet successfully', function(done) {
        //uncomment below and update the code to test threadsGet
        //instance.threadsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('threadsList', function() {
      it('should call threadsList successfully', function(done) {
        //uncomment below and update the code to test threadsList
        //instance.threadsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('threadsOptions', function() {
      it('should call threadsOptions successfully', function(done) {
        //uncomment below and update the code to test threadsOptions
        //instance.threadsOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('threadsThreadIdOptions', function() {
      it('should call threadsThreadIdOptions successfully', function(done) {
        //uncomment below and update the code to test threadsThreadIdOptions
        //instance.threadsThreadIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('threadsUpdate', function() {
      it('should call threadsUpdate successfully', function(done) {
        //uncomment below and update the code to test threadsUpdate
        //instance.threadsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersCreate', function() {
      it('should call usersCreate successfully', function(done) {
        //uncomment below and update the code to test usersCreate
        //instance.usersCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersDelete', function() {
      it('should call usersDelete successfully', function(done) {
        //uncomment below and update the code to test usersDelete
        //instance.usersDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGet', function() {
      it('should call usersGet successfully', function(done) {
        //uncomment below and update the code to test usersGet
        //instance.usersGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersList', function() {
      it('should call usersList successfully', function(done) {
        //uncomment below and update the code to test usersList
        //instance.usersList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersOptions', function() {
      it('should call usersOptions successfully', function(done) {
        //uncomment below and update the code to test usersOptions
        //instance.usersOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUpdate', function() {
      it('should call usersUpdate successfully', function(done) {
        //uncomment below and update the code to test usersUpdate
        //instance.usersUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUserIdOptions', function() {
      it('should call usersUserIdOptions successfully', function(done) {
        //uncomment below and update the code to test usersUserIdOptions
        //instance.usersUserIdOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUserIdOrdersOptions', function() {
      it('should call usersUserIdOrdersOptions successfully', function(done) {
        //uncomment below and update the code to test usersUserIdOrdersOptions
        //instance.usersUserIdOrdersOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
